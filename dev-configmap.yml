---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: backend
  name: backend
spec:
  ports:
    - name: "8001"
      port: 8001
      targetPort: 8001
  selector:
    io.kompose.service: backend
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: db
  name: db
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: db
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  ports:
    - name: "5672"
      port: 5672
      targetPort: 5672
    - name: "15672"
      port: 15672
      targetPort: 15672
  selector:
    io.kompose.service: rabbitmq
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: backend
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: backend
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
        kompose.version: 1.31.2 (a92241f79)
      labels:
        io.kompose.network/super-marketplace-default: "true"
        io.kompose.service: backend
    spec:
      containers:
        - env:
            - name: DB_DRIVER
              valueFrom:
                configMapKeyRef:
                  key: DB_DRIVER
                  name: super-marketplace-env-dev
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: DB_HOST
                  name: super-marketplace-env-dev
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: DB_NAME
                  name: super-marketplace-env-dev
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DB_PASSWORD
                  name: super-marketplace-env-dev
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: DB_PORT
                  name: super-marketplace-env-dev
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  key: DB_USER
                  name: super-marketplace-env-dev
            - name: JWT_ENCODE_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  key: JWT_ENCODE_ALGORITHM
                  name: super-marketplace-env-dev
            - name: JWT_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: JWT_SECRET_KEY
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_PASS
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_USER
                  name: super-marketplace-env-dev
            - name: RABBITMQ_URL
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_URL
                  name: super-marketplace-env-dev
            - name: RABBIT_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  key: RABBIT_HOSTNAME
                  name: super-marketplace-env-dev
          image: kerriganxd/market-backend:latest
          name: backend
          ports:
            - containerPort: 8001
              hostPort: 8001
              protocol: TCP
          resources: {}
      hostname: market-backend
      restartPolicy: Always
status: {}

---
apiVersion: v1
data:
  DB_DRIVER: "postgresql+asyncpg"
  DB_HOST: "market"
  DB_NAME: "market"
  DB_PASSWORD: "password"
  DB_PORT: "5432"
  DB_USER: "postgres"
  JWT_ENCODE_ALGORITHM: "HS256"
  JWT_SECRET_KEY: "mega-super-secret"
  RABBIT_HOSTNAME: "rabbitmq"
  RABBITMQ_DEFAULT_PASS: "guest"
  RABBITMQ_DEFAULT_USER: "guest"
  RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: super-marketplace-env-dev
  name: super-marketplace-env-dev

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  creationTimestamp: null
  labels:
    io.kompose.service: db
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: db
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
        kompose.version: 1.31.2 (a92241f79)
      creationTimestamp: null
      labels:
        io.kompose.network/super-marketplace-default: "true"
        io.kompose.service: db
    spec:
      containers:
        - env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_DB
              value: market
            - name: POSTGRES_PASSWORD
              value: password
            - name: POSTGRES_USER
              value: postgres
          image: postgres:16.2-alpine
          name: db
          ports:
            - containerPort: 5432
              hostPort: 5432
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: market-data
      hostname: market
      restartPolicy: Always
      volumes:
        - name: market-data
          persistentVolumeClaim:
            claimName: market-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: market-data
  name: market-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: orders-worker
  name: orders-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: orders-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
        kompose.version: 1.31.2 (a92241f79)
      labels:
        io.kompose.network/super-marketplace-default: "true"
        io.kompose.service: orders-worker
    spec:
      containers:
        - env:
            - name: DB_DRIVER
              valueFrom:
                configMapKeyRef:
                  key: DB_DRIVER
                  name: super-marketplace-env-dev
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: DB_HOST
                  name: super-marketplace-env-dev
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: DB_NAME
                  name: super-marketplace-env-dev
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DB_PASSWORD
                  name: super-marketplace-env-dev
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: DB_PORT
                  name: super-marketplace-env-dev
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  key: DB_USER
                  name: super-marketplace-env-dev
            - name: JWT_ENCODE_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  key: JWT_ENCODE_ALGORITHM
                  name: super-marketplace-env-dev
            - name: JWT_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: JWT_SECRET_KEY
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_PASS
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_USER
                  name: super-marketplace-env-dev
            - name: RABBITMQ_URL
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_URL
                  name: super-marketplace-env-dev
            - name: RABBIT_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  key: RABBIT_HOSTNAME
                  name: super-marketplace-env-dev
          image: kerriganxd/order-stargazer:latest
          name: orders-worker
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: order-worker-data
      hostname: orders-rq
      restartPolicy: Always
      volumes:
        - name: order-worker-data
          persistentVolumeClaim:
            claimName: order-worker-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: order-worker-data
  name: order-worker-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
        kompose.version: 1.31.2 (a92241f79)
      labels:
        io.kompose.network/super-marketplace-default: "true"
        io.kompose.service: rabbitmq
    spec:
      containers:
        - env:
            - name: RABBITMQ_DEFAULT_PASS
              value: password
            - name: RABBITMQ_DEFAULT_USER
              value: user
          image: rabbitmq:3-management
          name: rabbitmq
          ports:
            - containerPort: 5672
              hostPort: 5672
              protocol: TCP
            - containerPort: 15672
              hostPort: 15672
              protocol: TCP
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: rabbit-data
      hostname: rabbitmq
      restartPolicy: Always
      volumes:
        - name: rabbit-data
          persistentVolumeClaim:
            claimName: rabbit-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: rabbit-data
  name: rabbit-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
    kompose.version: 1.31.2 (a92241f79)
  labels:
    io.kompose.service: sales-worker
  name: sales-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: sales-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose.exe convert -f docker-compose.yml -o dev-configmap.yml
        kompose.version: 1.31.2 (a92241f79)
      labels:
        io.kompose.network/super-marketplace-default: "true"
        io.kompose.service: sales-worker
    spec:
      containers:
        - env:
            - name: DB_DRIVER
              valueFrom:
                configMapKeyRef:
                  key: DB_DRIVER
                  name: super-marketplace-env-dev
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: DB_HOST
                  name: super-marketplace-env-dev
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  key: DB_NAME
                  name: super-marketplace-env-dev
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: DB_PASSWORD
                  name: super-marketplace-env-dev
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  key: DB_PORT
                  name: super-marketplace-env-dev
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  key: DB_USER
                  name: super-marketplace-env-dev
            - name: JWT_ENCODE_ALGORITHM
              valueFrom:
                configMapKeyRef:
                  key: JWT_ENCODE_ALGORITHM
                  name: super-marketplace-env-dev
            - name: JWT_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: JWT_SECRET_KEY
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_PASS
                  name: super-marketplace-env-dev
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_DEFAULT_USER
                  name: super-marketplace-env-dev
            - name: RABBITMQ_URL
              valueFrom:
                configMapKeyRef:
                  key: RABBITMQ_URL
                  name: super-marketplace-env-dev
            - name: RABBIT_HOSTNAME
              valueFrom:
                configMapKeyRef:
                  key: RABBIT_HOSTNAME
                  name: super-marketplace-env-dev
          image: kerriganxd/sales-stargazer:latest
          name: sales-worker
          resources: {}
          volumeMounts:
            - mountPath: /var/lib/rabbitmq
              name: sale-worker-data
      hostname: sales-rq
      restartPolicy: Always
      volumes:
        - name: sale-worker-data
          persistentVolumeClaim:
            claimName: sale-worker-data
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: sale-worker-data
  name: sale-worker-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
